#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("s_axis_rx_data_TDATA", 128, hls_in, 0, "axis", "in_data", 1),
	Port_Property("s_axis_tx_meta_dout", 184, hls_in, 1, "ap_fifo", "fifo_port_we", 1),
	Port_Property("s_axis_tx_meta_empty_n", 1, hls_in, 1, "ap_fifo", "fifo_status", 1),
	Port_Property("s_axis_tx_meta_read", 1, hls_out, 1, "ap_fifo", "fifo_data", 1),
	Port_Property("s_axis_tx_data_TDATA", 128, hls_in, 2, "axis", "in_data", 1),
	Port_Property("m_axis_tx_data_TDATA", 128, hls_out, 3, "axis", "out_data", 1),
	Port_Property("m_axis_mem_write_cmd_TDATA", 192, hls_out, 4, "axis", "out_data", 1),
	Port_Property("m_axis_mem_read_cmd_TDATA", 192, hls_out, 5, "axis", "out_data", 1),
	Port_Property("m_axis_mem_write_data_TDATA", 128, hls_out, 6, "axis", "out_data", 1),
	Port_Property("s_axis_mem_read_data_TDATA", 128, hls_in, 7, "axis", "in_data", 1),
	Port_Property("s_axis_qp_interface_TDATA", 168, hls_in, 8, "axis", "in_data", 1),
	Port_Property("s_axis_qp_conn_interface_TDATA", 184, hls_in, 9, "axis", "in_data", 1),
	Port_Property("local_ip_address", 128, hls_in, 10, "ap_none", "in_data", 1),
	Port_Property("regCrcDropPkgCount", 32, hls_out, 11, "ap_vld", "out_data", 1),
	Port_Property("regInvalidPsnDropCount", 32, hls_out, 12, "ap_vld", "out_data", 1),
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axis_qp_interface_TVALID", 1, hls_in, 8, "axis", "in_vld", 1),
	Port_Property("s_axis_qp_interface_TREADY", 1, hls_out, 8, "axis", "in_acc", 1),
	Port_Property("regInvalidPsnDropCount_ap_vld", 1, hls_out, 12, "ap_vld", "out_vld", 1),
	Port_Property("m_axis_mem_write_cmd_TVALID", 1, hls_out, 4, "axis", "out_vld", 1),
	Port_Property("m_axis_mem_write_cmd_TREADY", 1, hls_in, 4, "axis", "out_acc", 1),
	Port_Property("m_axis_mem_write_data_TVALID", 1, hls_out, 6, "axis", "out_vld", 1),
	Port_Property("m_axis_mem_write_data_TREADY", 1, hls_in, 6, "axis", "out_acc", 1),
	Port_Property("s_axis_tx_data_TVALID", 1, hls_in, 2, "axis", "in_vld", 1),
	Port_Property("s_axis_tx_data_TREADY", 1, hls_out, 2, "axis", "in_acc", 1),
	Port_Property("s_axis_mem_read_data_TVALID", 1, hls_in, 7, "axis", "in_vld", 1),
	Port_Property("s_axis_mem_read_data_TREADY", 1, hls_out, 7, "axis", "in_acc", 1),
	Port_Property("m_axis_mem_read_cmd_TVALID", 1, hls_out, 5, "axis", "out_vld", 1),
	Port_Property("m_axis_mem_read_cmd_TREADY", 1, hls_in, 5, "axis", "out_acc", 1),
	Port_Property("s_axis_qp_conn_interface_TVALID", 1, hls_in, 9, "axis", "in_vld", 1),
	Port_Property("s_axis_qp_conn_interface_TREADY", 1, hls_out, 9, "axis", "in_acc", 1),
	Port_Property("regCrcDropPkgCount_ap_vld", 1, hls_out, 11, "ap_vld", "out_vld", 1),
	Port_Property("s_axis_rx_data_TVALID", 1, hls_in, 0, "axis", "in_vld", 1),
	Port_Property("s_axis_rx_data_TREADY", 1, hls_out, 0, "axis", "in_acc", 1),
	Port_Property("m_axis_tx_data_TVALID", 1, hls_out, 3, "axis", "out_vld", 1),
	Port_Property("m_axis_tx_data_TREADY", 1, hls_in, 3, "axis", "out_acc", 1),
};
const char* HLS_Design_Meta::dut_name = "rocev2_top";
